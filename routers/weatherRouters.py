from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import default_state, State, StatesGroup

from config import subscribed_users, user_cities
from services.weather import weather_service
from keyboards import exit_keyboard, main_menu_keyboard

router = Router()


class FSMChooseCity(StatesGroup):
    city_choice_state = State()


@router.message(
    F.text == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ãüå§Ô∏è",
    StateFilter(default_state)
)
async def get_weather(message: Message, state: FSMContext) -> None:
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞",
        reply_markup=exit_keyboard
    )
    await state.set_state(FSMChooseCity.city_choice_state)


@router.message(Command("weather"), StateFilter(default_state))
async def command_get_weather(message: Message, state: FSMContext) -> None:
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", 
        reply_markup=exit_keyboard
    )
    await state.set_state(FSMChooseCity.city_choice_state)


@router.message(StateFilter(FSMChooseCity.city_choice_state))
async def print_weather_forecast(
    message: types.Message,
    state: FSMContext
) -> None:
    city_name = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
    user_data = await state.get_data()
    is_subscribing = user_data.get("subscribing", False)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    weather_text = await weather_service.get_weather_forecast(city_name)
    
    if weather_text is None:
        await message.reply(
            text="–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=exit_keyboard
        )
    else:
        if is_subscribing:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.from_user.id
            subscribed_users.add(user_id)
            user_cities[user_id] = city_name
            
            await message.reply(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}!\n\n"
                f"–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n{weather_text}",
                reply_markup=main_menu_keyboard
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–ø–∏—Å–∫–∏
            await state.update_data(subscribing=False)
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
            await message.reply(weather_text, reply_markup=main_menu_keyboard)
        
        await state.set_state(default_state)
