import logging

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from aiogram import Bot

from config import subscribed_users, user_cities, TIMEZONE
from services.weather import weather_service

logger = logging.getLogger(__name__)


class SchedulerService:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
    
    async def send_daily_weather(self, bot: Bot) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã"""
        logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã...")
        
        if not subscribed_users:
            logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        success_count: int = 0
        error_count: int = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        users_to_process = subscribed_users.copy()
        
        for user_id in users_to_process:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                city = user_cities.get(user_id, "–ò—Ä–∫—É—Ç—Å–∫")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
                weather_text = await weather_service.get_weather_forecast(city)
                
                if weather_text:
                    await bot.send_message(
                        user_id, 
                        f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã:\n\n{weather_text}\n\n"
                        f"üí° –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è: /unsubscribe"
                    )
                    success_count += 1
                    logger.debug(f"‚úÖ –ü–æ–≥–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞
                    await bot.send_message(
                        user_id,
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}."
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è.\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥."
                    )
                    error_count += 1                    
            except Exception as e:
                error_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
                if "bot was blocked" in str(e).lower() or "Forbidden" in str(e):
                    subscribed_users.discard(user_id)
                    if user_id in user_cities:
                        del user_cities[user_id]
                    logger.info(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫")

        logger.info(f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")

    def setup_schedule(self, bot: Bot):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
        self.scheduler.add_job(
            self.send_daily_weather,
            trigger=CronTrigger(
                hour=9,
                minute=0, 
                timezone=TIMEZONE
            ),
            args=[bot]
        )

        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        self.scheduler.add_job(
            self.send_daily_weather,
            trigger='interval',
            minutes=2,
            args=[bot],
            id='test_schedule'
        )
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_service = SchedulerService()
